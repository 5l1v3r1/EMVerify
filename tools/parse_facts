#!/usr/bin/python

import sys, re

#IGNORE_SUFFIXES = ['Mastercard', 'Visa']
IGNORE_SUFFIXES = []
KEYWORDS = []#['verify', 'sign', 'In', 'Out', 'Eq']

def can_be_fact_name(string):
	return re.match("^\!?[a-zA-Z_0-9]+$", string)

def has_ignored_suffix(string, idx):
	for suff in IGNORE_SUFFIXES:
		if string.endswith(suff, 0, idx):
			return True
	return False

def create_html_code(filename):
	
	lines = []
	try:
		lines = open(filename).readlines()
	except:
		print '[Error] Invalid file name'
		return None
		
	print 'Parsing', filename
	src = ''.join(lines).replace('\n', ' ').replace('\t', ' ')
	fact_names = set()
	for (start, char) in enumerate(src):
		if char == '[':
			end = src.index(']', start, len(src))
			multiset = src[start+1:end]
			indices = [idx for idx, ch in enumerate(multiset) if ch == '(']
			for idx in indices:
				if not has_ignored_suffix(multiset, idx):
					try:
						fact_name = multiset[:idx].split()[-1].strip()
						if can_be_fact_name(fact_name):
							fact_names.add(fact_name)
					except:
						None

	html = '<!DOCTYPE html>\
					<html>\
					<head>\
					<style>\
					body {\
						font-size: .9em;\
						margin: .8em;\
						font-family: arial, sans-serif;}\
					table {\
					  border-collapse: collapse;\
						overflow-x: auto;\
						white-space: nowrap;\
					}\
					td, th {\
						background-color: #eeeeee;\
					  text-align: left;\
					  padding: 8px;\
					}\
					.separator{\
						padding-top:15px;\
					}\
					.bold{\
						font-weight: bold;\
					}\
					.redish{\
						color: #B22222;\
					}\
					.blueish{\
						color: #191970;\
					}\
					.orangish{\
						color: #FF8C00;\
					}\
					.keyword {\
						color: #9932CC;\
					}\
					</style>\
					</head>\
					<body>'

	html += '<h2>Source file</h2>' + filename +'<h2>Facts</h2><table>'

	single_use_facts = set()
	close_brackets = {')':'(', '}':'{', '>':'<'}
	for fact_name in fact_names:
		fact_instances = []#set()
		for pos in re.finditer(fact_name + '\s?\(', src):
			j = src.index('(', pos.start(), len(src))
			row = '<td class="blueish">' + src[pos.start(): j] +\
						'</td><td><span class="redish"">(</span>'
			
			open_count = {'(': 0, '{': 0, '<' : 0}
			in_string = 0
			j += 1
			_continue = True
			while _continue and j < len(src):		
				ch = src[j]
				if ch in open_count:
					open_count[ch] += 1
				elif ch in close_brackets:
					if ch == ')' and open_count['('] == 0:
						_continue = False
						#row += '<span class="redish">)</span></td>'
						#break
					open_count[close_brackets[ch]] -= 1
				
				if ch == ',' and sum([ct for (br,ct) in open_count.iteritems()]) == 0:
					row += '<span class="redish">,</span></td><td>'	
				else:
					if ch == '<':
						ch = '<span class="redish">&lt;</span>'
					elif ch == '>':
						ch = '<span class="redish">&gt;</span>'
					elif ch in ['{', '}', '(', ')', ',']:
						ch = '<span class="redish">' + ch + '</span>'
					elif ch == "'":
						in_string = 1 - in_string
						if in_string == 1:
							ch = '<span class="orangish">' + ch
						else:
							ch = ch + '</span>'
					#row += ch.replace("'", '&lt;')
					row += ch
				
				j += 1

			fact_instances.append(row)

		if len(fact_instances) == 1:
			single_use_facts.add(fact_instances[0])
		
		html += '<table>'
		for fact_instance in set(fact_instances):
			html += '<tr>' + fact_instance + '</tr>'
		html += '</table>'		
		html += '<p></p>'

	if len(single_use_facts) > 0:
		html += '<h2>Single-use facts</h2>'
		for fact_instance in single_use_facts:
			html += '<table><tr>' + fact_instance + '</tr></table><p></p>'
		#html += '<tr><td class="separator"></td></tr>'	

	#rule names
	html += '<h2>Rules</h2>'
	html += '<table>'
	html += '<tr><th>Rule name</th><th>Line</th></tr>'
	for line_number in range(1, len(lines) + 1):
		line = lines[line_number - 1]
		if line.startswith('rule'):
			rule_name = line.split()[-1].strip()[:-1]
			if not has_ignored_suffix(rule_name, len(rule_name)):
				html += '<tr><td>' + rule_name +\
								'</td><td>' + str(line_number) + '</td></tr>'
	html += '</table>'

	html += '</body>'
	html += '</html>'
	
	#format keywords
	for keyword in KEYWORDS:
		html = html.replace(keyword, '<i class="keyword">' + keyword + '</i>')
	
	return html

def main():
	if len(sys.argv) == 1:
		print '[Error] You must enter a valid file name'
	else:
		html = create_html_code(sys.argv[1])
		output = 'facts.html' #default output file
		if len(sys.argv) > 2:
			output = sys.argv[2]
		if html:
			print 'Writing html code into:', output
			outfile = open('./'+output, 'w')
			outfile.write(html)
			outfile.close()
			print 'Done.'

main()




		